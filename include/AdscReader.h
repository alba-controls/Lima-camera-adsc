#ifndef ADSCREADER_H
#define ADSCREADER_H


///////////////////////////////////////////////////////////
// YAT::TASK 
///////////////////////////////////////////////////////////
#include <yat/threading/Task.h>
#include <DiffractionImage.h>			//- to read back img data

#define kLO_WATER_MARK      128
#define kHI_WATER_MARK      512

#define kPOST_MSG_TMO       2

#define kTASK_PERIODIC_TIMEOUT_MS    	200 //200 ms
#define TIME_SLEEP		        100 // 100 ms

const size_t  ADSC_START_MSG     =   (yat::FIRST_USER_MSG + 300);
const size_t  ADSC_STOP_MSG      =   (yat::FIRST_USER_MSG + 301);
const size_t  ADSC_RESET_MSG     =   (yat::FIRST_USER_MSG + 302);


///////////////////////////////////////////////////////////


#include <stdlib.h>
#include <limits>

#include "Debug.h"
#include "Data.h"

#include "HwMaxImageSizeCallback.h"
#include "AdscCamera.h"
#include "HwBufferCtrlObj.h"


using namespace lima;
using namespace lima::Adsc;
using namespace std;


namespace lima
{
namespace Adsc
{

/*******************************************************************
 * \class Reader
 * \brief object involved reading/watching IMG files generated by Adsc
 *******************************************************************/

class Reader : public yat::Task
{
  DEB_CLASS_NAMESPC(DebModCamera, "Reader", "Adsc");

public:

  //ctor
  Reader(Camera& cam, HwBufferCtrlObj& buffer_ctrl);
  //dtor
  virtual ~Reader();

  //prepare reading image file
  void start();
  //reading image file et pass it through lima framework using newFrameReady()
  void stop();
  //not implemented
  void reset();
  //return image index, index starting at 0
  int  getLastAcquiredFrame(void);
  //return true if reader can not read image file during a "Timeout"
  bool isTimeoutSignaled(void);
  //return true while reader is waiting and processing image file
  bool isRunning(void);
  //define max allowed Time before reading image file is done
  void setTimeout(int TO);
  //allow using diffraction image to open image file
  void enableReader(void);
  //use simulated image (all pixels sets to 0)
  void disableReader(void);

  //- [yat::Task implementation]
protected: 
  virtual void handle_message( yat::Message& msg )    throw (yat::Exception);

private:
  void addNewFrame(std::string filename = "");

  //- Mutex
  yat::Mutex                  m_lock;
  Camera&                     m_cam;
  HwBufferCtrlObj&            m_buffer;
  int                         m_image_number;
  bool 						  m_is_stop_done;
  bool						  m_is_running;
  bool                        m_is_timeout_signaled;
  bool 						  m_is_reader_open_image_file;
  int						  m_timeout;
  
  //Loading image stuff!
  Size                        m_image_size;

  //simulate an image !
  uint16_t*                   m_image;

};
} // namespace Adsc
} // namespace lima


#endif // ADSCREADER_H
